<%
local api = require "luci.model.cbi.passwall.api.api"
local dsp = require "luci.dispatcher"
local ipkg = require "luci.model.ipkg"

local function is_finded(e)
	local result=luci.sys.exec("find /usr/*bin -iname "..e.." -type f")
	if result~="" then
		return true
	end
	return false
end

local tcp_node_num = api.uci_get_type("global_other", "tcp_node_num")
local udp_node_num = api.uci_get_type("global_other", "udp_node_num")
local socks5_node_num = api.uci_get_type("global_other", "socks5_node_num")
-%>

<style>
/* @media screen and (min-width: 1600px) {
	#_passwall_status_fieldset > fieldset {
		padding: 0px;
	}

	#_passwall_status_fieldset > fieldset > div {
		width: 200px;
		height: 60px;
		background: #f7fafd;
		float: left;
		margin: 5px;
		padding: 0.3rem 1rem;
		border-radius: 10px;
		display: flex;
		align-items: center;
		clear: unset;
	}

	#_passwall_status_fieldset > fieldset > div > .cbi-value-title {
		text-align: left;
		width: unset;
		padding-top: unset;
	}

	#_passwall_status_fieldset > fieldset > div > .cbi-value-field {
		padding-top: unset;
	}

	#_passwall_status_fieldset > fieldset > div > .cbi-value-field > font {
		padding-top: unset;
	}

	#_server_status > font {
		display: block;
	}
}
*/
</style>

<fieldset id="_passwall_status_fieldset" class="cbi-section">
	<legend>
		<%:Running Status%>
	</legend>
	<fieldset class="cbi-section">
		<% if tcp_node_num and tonumber(tcp_node_num) >= 1 then %>
			<% for i = 1, tcp_node_num, 1 do %>
			<div class="cbi-value">
				<label class="cbi-value-title">TCP_<%=i%>
					<%:Status%>
				</label>
				<div class="cbi-value-field" id="_tcp_node<%=i%>_status">
					<%:Collecting data...%>
				</div>
			</div>
			<% end %>
		<% end %>
		
		<% if udp_node_num and tonumber(udp_node_num) >= 1 then %>
			<% for i = 1, udp_node_num, 1 do %>
			<div class="cbi-value">
				<label class="cbi-value-title">UDP_<%=i%>
					<%:Status%>
				</label>
				<div class="cbi-value-field" id="_udp_node<%=i%>_status">
					<%:Collecting data...%>
				</div>
			</div>
			<% end %>
		<% end %>
		
		<% if socks5_node_num and tonumber(socks5_node_num) >= 1 then %>
			<% for i = 1, socks5_node_num, 1 do %>
			<div class="cbi-value">
				<label class="cbi-value-title">Socks5_<%=i%>
					<%:Status%>
				</label>
				<div class="cbi-value-field" id="_socks5_node<%=i%>_status">
					<%:Collecting data...%>
				</div>
			</div>
			<% end %>
		<% end %>
		
		<div class="cbi-value">
			<label class="cbi-value-title">DNS
				<%:Status%>
			</label>
			<div class="cbi-value-field" id="_dns_mode_status">
				<%:Collecting data...%>
			</div>
		</div>
		<% if ipkg.installed("haproxy") or is_finded("haproxy*") then %>
		<div class="cbi-value">
			<label class="cbi-value-title">
				<%:Load Balancing%>
			</label>
			<div class="cbi-value-field" id="_haproxy_status">
				<%:Collecting data...%>
			</div>
		</div>
		<% end %>
		<% if ipkg.installed("kcptun") or is_finded("kcptun*") then %>
		<div class="cbi-value">
			<label class="cbi-value-title">
				<%:Kcptun%>
			</label>
			<div class="cbi-value-field" id="_kcptun_status">
				<%:Collecting data...%>
			</div>
		</div>
		<% end %>
		<div class="cbi-value">
			<label class="cbi-value-title">
				<%:Baidu Connection%>
			</label>
			<div class="cbi-value-field">
				<input type="button" class="cbi-button cbi-input-apply" value="<%:Check%>" onclick="return check_connect(this,'baidu')" />
				<font id="_baidu_status"></font>
			</div>
		</div>
		<div class="cbi-value">
			<label class="cbi-value-title">
				<%:Google Connection%>
			</label>
			<div class="cbi-value-field">
				<input type="button" class="cbi-button cbi-input-apply" value="<%:Check%>" onclick="return check_connect(this,'google')" />
				<font id="_google_status"></font>
			</div>
		</div>
		<div class="cbi-value">
			<label class="cbi-value-title">
				<%:Server Check%>
			</label>
			<div class="cbi-value-field">
				<input type="button" class="cbi-button cbi-input-apply" value="<%:Check%>" onclick="return check_port(this)" />
				<font id="_server_status"></font>
				<input id="clear_check_port_btn" type="button" class="cbi-button cbi-button-remove" style="display:none" value="<%:Clear%>" onclick="return clear_check_port(this)" />
			</div>
		</div>
		<div class="cbi-value">
			<label class="cbi-value-title"></label>
			<div class="cbi-value-field">
				<input type="button" class="cbi-button cbi-input-reload" value="IP111.cn" onclick="javascript:window.open('http://www.ip111.cn/','target');" />
			</div>
		</div>
	</fieldset>
</fieldset>

<script type="text/javascript">
	//<![CDATA[
	var dns_mode_status = document.getElementById('_dns_mode_status');
	var haproxy_status = document.getElementById('_haproxy_status');
	var kcptun_status = document.getElementById('_kcptun_status');
	var baidu_status = document.getElementById('_baidu_status');
	var google_status = document.getElementById('_google_status');
	XHR.poll(3, '<%=dsp.build_url("admin/vpn/passwall/status")%>', null,
		function(x, json) {
			if(x && x.status == 200) {
				<% if tcp_node_num and tonumber(tcp_node_num) >= 1 then %>
					<% for i = 1, tcp_node_num, 1 do %>
						var tcp_node<%=i%>_status = document.getElementById('_tcp_node<%=i%>_status');
						if(tcp_node<%=i%>_status)
							tcp_node<%=i%>_status.innerHTML = json.tcp_node<%=i%>_status ? '<font color=green><%:RUNNING%> ✓</font>' : '<font color=red><%:NOT RUNNING%> X</font>';
					<% end %>
				<% end %>
				<% if udp_node_num and tonumber(udp_node_num) >= 1 then %>
					<% for i = 1, udp_node_num, 1 do %>
						var udp_node<%=i%>_status = document.getElementById('_udp_node<%=i%>_status');
						if(udp_node<%=i%>_status)
							udp_node<%=i%>_status.innerHTML = json.udp_node<%=i%>_status ? '<font color=green><%:RUNNING%> ✓</font>' : '<font color=red><%:NOT RUNNING%> X</font>';
					<% end %>
				<% end %>
				<% if socks5_node_num and tonumber(socks5_node_num) >= 1 then %>
					<% for i = 1, socks5_node_num, 1 do %>
						var socks5_node<%=i%>_status = document.getElementById('_socks5_node<%=i%>_status');
						if(socks5_node<%=i%>_status)
							socks5_node<%=i%>_status.innerHTML = json.socks5_node<%=i%>_status ? '<font color=green><%:RUNNING%> ✓</font>' : '<font color=red><%:NOT RUNNING%> X</font>';
					<% end %>
				<% end %>
				if(dns_mode_status)
					dns_mode_status.innerHTML = json.dns_mode_status ? '<font color=green><%:RUNNING%> ✓</font>' : '<font color=red><%:NOT RUNNING%> X</font>';
				if(haproxy_status)
					haproxy_status.innerHTML = json.haproxy_status ? '<font color=green><%:RUNNING%> ✓</font>' : '<font color=red><%:NOT RUNNING%> X</font>';
				if(kcptun_status)
					kcptun_status.innerHTML = json.kcptun_status ? '<font color=green><%:RUNNING%> ✓</font>' : '<font color=red><%:NOT RUNNING%> X</font>';
			}
		});

	function check_connect(btn, type) {
		btn.disabled = true;
		btn.value = '<%:Check...%>';
		XHR.get('<%=dsp.build_url("admin/vpn/passwall/connect_status")%>', {
				type: type
			},
			function(x, rv) {
				var s = document.getElementById('_' + type + '_status');
				if(s) {
					if(rv.status) {
						//s.setAttribute("color","green");
						btn.setAttribute("style","background-color: green !important; border-color: green !important;");
						btn.value = '<%:Working...%> ✓';
					}
					else {
						//s.setAttribute("color","red");
						btn.setAttribute("style","background-color:red !important; border-color: red !important;");
						btn.value = '<%:Problem detected!%> X';
					}
				}
				btn.disabled = false;
				//btn.value = '<%:Check%>';
			}
		);
		return false;
	}

	function check_port(btn) {
		btn.disabled = true;
		btn.value = '<%:Check...%>';
		XHR.get('<%=dsp.build_url("admin/vpn/passwall/check_port")%>', null,
			function(x, rv) {
				var s = document.getElementById('_server_status');
				if(s) {
					s.innerHTML = rv.ret;
					var clear_btn = document.getElementById('clear_check_port_btn');
					clear_btn.style.display = "inline-block";
				}
				btn.disabled = false;
				btn.value = '<%:Check%>';
			}
		);
		return false;
	}

	function clear_check_port(btn) {
		btn.style.display = 'none';
		var s = document.getElementById('_server_status');
		s.innerHTML = "";
		return false;
	}
	//]]>
</script>